{"version":3,"file":"class-map.js","sourceRoot":"","sources":["../src/directives/class-map.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,aAAa,EAAE,SAAS,EAAQ,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAG5E,8DAA8D;AAC9D,+CAA+C;AAC/C,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;IAC/C,YAAY,CAAC,SAAS,CAAC,MAAM,GAAG,UAC5B,KAAa,EAAE,KAAyB;QAC1C,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,EAAE;YAChC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACjB;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpB;QACD,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC5C,CAAC,CAAC;CACH;AAMD;;;GAGG;AACH,MAAM,aAAa,GAAG,IAAI,OAAO,EAAE,CAAC;AAEpC;;;;GAIG;AACH,oEAAoE;AACpE,MAAM,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;AAEtC;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,SAAoB,EAAE,EAAE,CAAC,CAAC,IAAU,EAAE,EAAE;IACzE,IAAI,CAAC,CAAC,IAAI,YAAY,aAAa,CAAC,IAAI,CAAC,IAAI,YAAY,YAAY,CAAC;QAClE,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACtE,MAAM,IAAI,KAAK,CACX,iEAAiE;YACjE,6CAA6C,CAAC,CAAC;KACpD;IACD,wBAAwB;IACxB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpE,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACjC;IACD,0CAA0C;IAC1C,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxC,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;QAC1B,IAAI,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC/C;KACF;IACD,kBAAkB;IAClB,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;QAC5B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;YACnD,uDAAuD;YACvD,sDAAsD;YACtD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACzE;KACF;IACD,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n\n// On IE11, classList.toggle doesn't accept a second argument.\n// Since this is so minor, we just polyfill it.\nif (window.navigator.userAgent.match('Trident')) {\n  DOMTokenList.prototype.toggle = function(\n      token: string, force?: boolean|undefined) {\n    if (force === undefined || force) {\n      this.add(token);\n    } else {\n      this.remove(token);\n    }\n    return force === undefined ? true : force;\n  };\n}\n\nexport interface ClassInfo {\n  [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n\n/**\n * Stores AttributeParts that have had static classes applied (e.g. `foo` in\n * class=\"foo ${classMap()}\"). Static classes are applied only the first time\n * the directive is run on a part.\n */\n// Note, could be a WeakSet, but prefer not requiring this polyfill.\nconst classMapStatics = new WeakMap();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n  // handle static classes\n  if (!classMapStatics.has(part)) {\n    part.committer.element.className = part.committer.strings.join(' ');\n    classMapStatics.set(part, true);\n  }\n  // remove old classes that no longer apply\n  const oldInfo = classMapCache.get(part);\n  for (const name in oldInfo) {\n    if (!(name in classInfo)) {\n      part.committer.element.classList.remove(name);\n    }\n  }\n  // add new classes\n  for (const name in classInfo) {\n    if (!oldInfo || (oldInfo[name] !== classInfo[name])) {\n      // We explicitly want a loose truthy check here because\n      // it seems more convenient that '' and 0 are skipped.\n      part.committer.element.classList.toggle(name, Boolean(classInfo[name]));\n    }\n  }\n  classMapCache.set(part, classInfo);\n});\n"]}