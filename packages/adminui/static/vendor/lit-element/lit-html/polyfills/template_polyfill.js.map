{"version":3,"file":"template_polyfill.js","sourceRoot":"","sources":["../src/polyfills/template_polyfill.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,MAAM,GAAG,KAAK,EAAE,EAAE;IACrD,IAAI,OAAO,mBAAmB,KAAK,WAAW,IAAI,CAAC,MAAM,EAAE;QACzD,OAAO;KACR;IACD,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAE1E,kCAAkC;IAClC,MAAM,OAAO,GAAG,CAAC,QAAa,EAAE,EAAE;QAChC,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC,sBAAsB,EAAE,CAAC;QACvD,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE;YAC3C,GAAG,EAAE,UAAS,IAAI;gBAChB,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACjC,MAAM,OAAO,GAAI,IAA4B,CAAC,OAAO,CAAC;gBACtD,OAAO,OAAO,CAAC,UAAU,EAAE;oBACzB,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;iBACzC;gBACD,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;gBAC7B,OAAO,IAAI,CAAC,UAAU,EAAE;oBACtB,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBACtC;YACH,CAAC;YACD,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IAC/D,QAAQ,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa,CACrD,OAAe,EAAE,OAAgC;QACnD,IAAI,EAAE,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5D,IAAI,EAAE,CAAC,SAAS,KAAK,UAAU,EAAE;YAC/B,EAAE,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO,CAAC,EAAE,CAAC,CAAC;SACb;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * A lightweight <template> polyfill that supports minimum features to cover\n * lit-html use cases. It provides an alternate route in case <template> is not\n * natively supported.\n * Please note that nested template, cloning template node and innerHTML getter\n * do NOT work with this polyfill.\n * If it can not fullfill your requirement, please consider using the full\n * polyfill: https://github.com/webcomponents/template\n */\nexport const initTemplatePolyfill = (forced = false) => {\n  if (typeof HTMLTemplateElement !== 'undefined' && !forced) {\n    return;\n  }\n  const contentDoc = document.implementation.createHTMLDocument('template');\n\n  // tslint:disable-next-line:no-any\n  const upgrade = (template: any) => {\n    template.content = contentDoc.createDocumentFragment();\n    Object.defineProperty(template, 'innerHTML', {\n      set: function(text) {\n        contentDoc.body.innerHTML = text;\n        const content = (this as HTMLTemplateElement).content;\n        while (content.firstChild) {\n          content.removeChild(content.firstChild);\n        }\n        const body = contentDoc.body;\n        while (body.firstChild) {\n          content.appendChild(body.firstChild);\n        }\n      },\n      configurable: true\n    });\n  };\n\n  const capturedCreateElement = Document.prototype.createElement;\n  Document.prototype.createElement = function createElement(\n      tagName: string, options?: ElementCreationOptions) {\n    let el = capturedCreateElement.call(this, tagName, options);\n    if (el.localName === 'template') {\n      el = capturedCreateElement.call(this, 'div');\n      upgrade(el);\n    }\n    return el;\n  };\n};\n"]}